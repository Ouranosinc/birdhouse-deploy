##############################################################################
# Generic job for deploy_data_specific_image script found on the birdhouse/pavics-jupyter-base image.
# Configuration vars, set in env.local before sourcing this file.
# This job assume the "scheduler" component is enabled.
#
# Also, the image started by the job must contain the script "deploy_data_specific_image"
# and a yaml config file "notebook_config.yml", and they must be placed on the root directory.
# The script is included in the pavics-jupyter-base image (https://github.com/bird-house/pavics-jupyter-base).
# Each specific images deriving from this base image should include its own "notebook_config.yml" file.
##############################################################################

# Cronjob schedule.
if [ -z "$DEPLOY_DATA_JOB_SCHEDULE" ]; then
    echo "Error: DEPLOY_DATA_JOB_SCHEDULE not set" 1>&2
    exit 1
    #DEPLOY_DATA_JOB_SCHEDULE="3 1,4,7,10,13,16,19,22 * * *"  # UTC
fi

# Job name.
if [ -z "$DEPLOY_DATA_JOB_JOB_NAME" ]; then
    echo "Error: DEPLOY_DATA_JOB_JOB_NAME not set" 1>&2
    exit 1
    #DEPLOY_DATA_JOB_JOB_NAME="job_name"
fi

# Docker image to run deploy-date script.
if [ -z "$DEPLOY_DATA_JOB_DOCKER_IMAGE" ]; then
    echo "Error: DEPLOY_DATA_JOB_DOCKER_IMAGE not set" 1>&2
    exit 1
fi

# Name of the image found on the JupyterHub selection page, important for the path of the volume mount
if [ -z "$DEPLOY_DATA_JOB_JUPYTERHUB_IMAGE_NAME" ]; then
    echo "Error: DEPLOY_DATA_JOB_JUPYTERHUB_IMAGE_NAME not set" 1>&2
    exit 1
fi

# Job description.
if [ -z "$DEPLOY_DATA_JOB_JOB_DESCRIPTION" ]; then
    DEPLOY_DATA_JOB_JOB_DESCRIPTION="$DEPLOY_DATA_JOB_JOB_NAME"
fi

# Log file location.  Default location under /var/log/PAVICS/ has built-in logrotate.
if [ -z "$DEPLOY_DATA_JOB_LOGFILE" ]; then
    DEPLOY_DATA_JOB_LOGFILE="${PAVICS_LOG_DIR}/${DEPLOY_DATA_JOB_JOB_NAME}.log"
fi

##############################################################################
# End configuration vars
##############################################################################


if [ -z "`echo "$AUTODEPLOY_EXTRA_SCHEDULER_JOBS" | grep $DEPLOY_DATA_JOB_JOB_NAME`" ]; then

    # Add job only if not already added (config is read more than once during
    # autodeploy process).

    LOGFILE_DIRNAME="`dirname "$DEPLOY_DATA_JOB_LOGFILE"`"

    # Default directory where the notebooks are downloaded in the image used for the deploy data job
    export NOTEBOOK_DEST_DIR=/tmp/notebooks

    export AUTODEPLOY_EXTRA_SCHEDULER_JOBS="
$AUTODEPLOY_EXTRA_SCHEDULER_JOBS

- name: $DEPLOY_DATA_JOB_JOB_NAME
  comment: $DEPLOY_DATA_JOB_JOB_DESCRIPTION
  schedule: '$DEPLOY_DATA_JOB_SCHEDULE'
  command: '/deploy_data_specific_image /notebook_config.yml'
  dockerargs: >-
    --rm --name $DEPLOY_DATA_JOB_JOB_NAME
    --volume ${JUPYTERHUB_USER_DATA_DIR}/tutorial-notebooks/${DEPLOY_DATA_JOB_JUPYTERHUB_IMAGE_NAME}:${NOTEBOOK_DEST_DIR}:rw
    --volume ${LOGFILE_DIRNAME}:${LOGFILE_DIRNAME}:rw
    --env DEPLOY_DATA_LOGFILE=${DEPLOY_DATA_JOB_LOGFILE}
    --env NOTEBOOK_DEST_DIR=${NOTEBOOK_DEST_DIR}
    --user 0:0
  image: ${DEPLOY_DATA_JOB_DOCKER_IMAGE}
"

fi


# Reset all config vars to prevent cross-contamination between successive invocations.
DEPLOY_DATA_JOB_SCHEDULE=""
DEPLOY_DATA_JOB_JOB_NAME=""
DEPLOY_DATA_JOB_LOGFILE=""
DEPLOY_DATA_JOB_JOB_DESCRIPTION=""
DEPLOY_DATA_JOB_DOCKER_IMAGE=""
DEPLOY_DATA_JOB_JUPYTERHUB_IMAGE_NAME=""


# vi: tabstop=8 expandtab shiftwidth=4 softtabstop=4
